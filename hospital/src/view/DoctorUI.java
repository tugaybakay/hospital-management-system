package view;

import helper.DbHelper;
import model.Doctor;
import java.util.Date;
import java.sql.*;
import helper.Helper;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class DoctorUI extends javax.swing.JFrame {

    private DbHelper db = new DbHelper();
    private Helper helper = new Helper();
    private Doctor doctor;
    private DefaultTableModel tblmdlDoctorWorkHour = new DefaultTableModel(){
      @Override
        public boolean isCellEditable(int row, int column) {
        // Tüm hücreleri düzenlenemez hale getir
        return false;
        }
    };
    private DefaultTableModel tblmdlDoctorAppointment = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
        // Tüm hücreleri düzenlenemez hale getir
        return false;
        }
    };
    private Object[] hourColname = new Object[4];
    private Object[] appointmentColName = new Object[4];
    
    public DoctorUI(Doctor doctor) {
        initComponents();
        this.doctor = doctor;
        Date now = new Date();
        dtchsrDoctorWorkDate.setMinSelectableDate(now);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
            Date dateMax = sdf.parse("01/05/2025");
            dtchsrDoctorWorkDate.setMaxSelectableDate(dateMax);
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        lblDoctorName.setText(lblDoctorName.getText()+doctor.getName());
        lblDoctorTcNo.setText(lblDoctorTcNo.getText()+doctor.getTcNo());
        hourColname[0] = "Id";
        hourColname[1] = "Doctor Id";
        hourColname[2] = "Hour";
        hourColname[3] = "Date";
        
        tblmdlDoctorWorkHour.setColumnIdentifiers(hourColname);
        doctorWorkHourTableUpdate();
        tblDoctorWorkHourDate.setModel(tblmdlDoctorWorkHour);
        
        appointmentColName[0] = "ID";
        appointmentColName[1] = "Patient ID";
        appointmentColName[2] = "Date ID";
        appointmentColName[3] = "Explanation";
        tblmdlDoctorAppointment.setColumnIdentifiers(appointmentColName);
        tblDoctorAppointment.setModel(tblmdlDoctorAppointment);
        doctorAppointmentTableUpdate();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctorAppointment = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtrDoctorPatientExplanation = new javax.swing.JTextArea();
        tbbdpnAddDeleteDoctorWorkHour = new javax.swing.JTabbedPane();
        pnlAddDoctorWorkHour = new javax.swing.JPanel();
        cmbbxAddDoctorWorkHour = new javax.swing.JComboBox<>();
        bttnAddDoctorWorkHour = new javax.swing.JButton();
        lblAddWorkHour = new javax.swing.JLabel();
        dtchsrDoctorWorkDate = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pnlDeleteDoctorWorkHour = new javax.swing.JPanel();
        txtfldDeleteDoctorWorkHourId = new javax.swing.JTextField();
        bttnDeleteDoctorWorkHour = new javax.swing.JButton();
        lblDeleteWorkHour = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDoctorWorkHourDate = new javax.swing.JTable();
        lblDoctorName = new javax.swing.JLabel();
        lblDoctorTcNo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(780, 700));

        kGradientPanel1.setkEndColor(new java.awt.Color(0, 204, 204));
        kGradientPanel1.setkGradientFocus(200);
        kGradientPanel1.setkStartColor(new java.awt.Color(153, 0, 153));

        tblDoctorAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDoctorAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoctorAppointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDoctorAppointment);

        txtrDoctorPatientExplanation.setBackground(new java.awt.Color(255, 255, 255));
        txtrDoctorPatientExplanation.setColumns(20);
        txtrDoctorPatientExplanation.setForeground(new java.awt.Color(0, 0, 0));
        txtrDoctorPatientExplanation.setRows(5);
        txtrDoctorPatientExplanation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(19, 91, 160)));
        jScrollPane2.setViewportView(txtrDoctorPatientExplanation);

        pnlAddDoctorWorkHour.setBackground(new java.awt.Color(255, 255, 255));

        cmbbxAddDoctorWorkHour.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbbxAddDoctorWorkHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08.00", "08.30", "09.00", "09.30", "10.00", "10.30", "11.00", "11.30", "12.00", "13.30", "14.00", "14.30", "15.00", "15.30", "16.00", "16.30" }));

        bttnAddDoctorWorkHour.setBackground(new java.awt.Color(19, 91, 160));
        bttnAddDoctorWorkHour.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bttnAddDoctorWorkHour.setForeground(new java.awt.Color(255, 255, 255));
        bttnAddDoctorWorkHour.setText("ADD");
        bttnAddDoctorWorkHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAddDoctorWorkHourActionPerformed(evt);
            }
        });

        lblAddWorkHour.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAddWorkHour.setForeground(new java.awt.Color(19, 91, 160));
        lblAddWorkHour.setText("ADD WORK HOUR");

        jLabel3.setForeground(new java.awt.Color(19, 91, 160));
        jLabel3.setText("Date");

        jLabel5.setForeground(new java.awt.Color(19, 91, 160));
        jLabel5.setText("Hour");

        javax.swing.GroupLayout pnlAddDoctorWorkHourLayout = new javax.swing.GroupLayout(pnlAddDoctorWorkHour);
        pnlAddDoctorWorkHour.setLayout(pnlAddDoctorWorkHourLayout);
        pnlAddDoctorWorkHourLayout.setHorizontalGroup(
            pnlAddDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddDoctorWorkHourLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(pnlAddDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAddDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblAddWorkHour, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                        .addComponent(bttnAddDoctorWorkHour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbbxAddDoctorWorkHour, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dtchsrDoctorWorkDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        pnlAddDoctorWorkHourLayout.setVerticalGroup(
            pnlAddDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddDoctorWorkHourLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(lblAddWorkHour)
                .addGap(22, 22, 22)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbbxAddDoctorWorkHour, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtchsrDoctorWorkDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(bttnAddDoctorWorkHour, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        tbbdpnAddDeleteDoctorWorkHour.addTab("Add", pnlAddDoctorWorkHour);

        pnlDeleteDoctorWorkHour.setBackground(new java.awt.Color(255, 255, 255));

        txtfldDeleteDoctorWorkHourId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtfldDeleteDoctorWorkHourId.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(19, 91, 160)));

        bttnDeleteDoctorWorkHour.setBackground(new java.awt.Color(19, 91, 160));
        bttnDeleteDoctorWorkHour.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bttnDeleteDoctorWorkHour.setForeground(new java.awt.Color(255, 255, 255));
        bttnDeleteDoctorWorkHour.setText("DELETE");
        bttnDeleteDoctorWorkHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnDeleteDoctorWorkHourActionPerformed(evt);
            }
        });

        lblDeleteWorkHour.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDeleteWorkHour.setForeground(new java.awt.Color(19, 91, 160));
        lblDeleteWorkHour.setText("DELETE WORK HOUR");

        jLabel6.setForeground(new java.awt.Color(19, 91, 160));
        jLabel6.setText("Id");

        javax.swing.GroupLayout pnlDeleteDoctorWorkHourLayout = new javax.swing.GroupLayout(pnlDeleteDoctorWorkHour);
        pnlDeleteDoctorWorkHour.setLayout(pnlDeleteDoctorWorkHourLayout);
        pnlDeleteDoctorWorkHourLayout.setHorizontalGroup(
            pnlDeleteDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeleteDoctorWorkHourLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnlDeleteDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlDeleteDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblDeleteWorkHour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtfldDeleteDoctorWorkHourId)
                        .addComponent(bttnDeleteDoctorWorkHour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        pnlDeleteDoctorWorkHourLayout.setVerticalGroup(
            pnlDeleteDoctorWorkHourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeleteDoctorWorkHourLayout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(lblDeleteWorkHour)
                .addGap(40, 40, 40)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtfldDeleteDoctorWorkHourId, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(bttnDeleteDoctorWorkHour, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        tbbdpnAddDeleteDoctorWorkHour.addTab("Delete", pnlDeleteDoctorWorkHour);

        tblDoctorWorkHourDate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDoctorWorkHourDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoctorWorkHourDateMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblDoctorWorkHourDate);

        lblDoctorName.setBackground(new java.awt.Color(255, 255, 255));
        lblDoctorName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDoctorName.setForeground(new java.awt.Color(255, 255, 255));
        lblDoctorName.setText("Name = ");

        lblDoctorTcNo.setBackground(new java.awt.Color(255, 255, 255));
        lblDoctorTcNo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDoctorTcNo.setForeground(new java.awt.Color(255, 255, 255));
        lblDoctorTcNo.setText("Tc No = ");

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tbbdpnAddDeleteDoctorWorkHour)
                    .addComponent(lblDoctorName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDoctorTcNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(15, 15, 15))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDoctorTcNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tbbdpnAddDeleteDoctorWorkHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void doctorAppointmentTableUpdate(){
        Connection connection = null;
        Statement statement = null;
        String sqlQuery = "select * from appointment where doctor_id_="+doctor.getId()+";";
        
        try{
            connection = db.connect();
            statement = connection.createStatement();
            ResultSet result = statement.executeQuery(sqlQuery);
            Object[] row = new Object[4];
            while(result.next()){
                row[0]=result.getInt("id");
                row[1] = result.getInt("patient_id_");
                row[2] = result.getInt("date_time_id_");
                row[3] = result.getString("explanation");
                tblmdlDoctorAppointment.addRow(row);
            }
            
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            try{
                connection.close();
                statement.close();
            }catch(SQLException ex){
                helper.error("db");
            }
         
        }
    }
    
    public void doctorWorkHourTableUpdate(){
        tblmdlDoctorWorkHour.setRowCount(0);
        Connection connection = null;
        Statement statement = null;
        String sqlQuery = "select * from hours where doctor_id_="+doctor.getId()+";";
        
        try{
            connection = db.connect();
            statement = connection.createStatement();
            ResultSet result = statement.executeQuery(sqlQuery);
            Object[] row = new Object[4];
            while(result.next()){
                row[0]=result.getInt("id_");
                row[1] = result.getInt("doctor_id_");
                row[2] = result.getString("hour_");
                row[3] = result.getString("date_");
                tblmdlDoctorWorkHour.addRow(row);
            }
            
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            try{
                connection.close();
                statement.close();
            }catch(SQLException ex){
                helper.error("db");
            }
         
        }
    }
    
    private void bttnAddDoctorWorkHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAddDoctorWorkHourActionPerformed
        String doctorWorkHour = cmbbxAddDoctorWorkHour.getSelectedItem().toString();
        Date selectedDate = dtchsrDoctorWorkDate.getDate();
        
        if(selectedDate==null){
            helper.error("empty");
            return;
        }
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String date = sdf.format(selectedDate);
        
        String sqlQuery = "select * from hours where hour_=\""+doctorWorkHour.replace('"', 'ü')+"\" and date_=\""+date+"\";";
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        
        try{
            connection = db.connect();
            statement = connection.createStatement();
            ResultSet result = statement.executeQuery(sqlQuery);
            if(result.next()){
                helper.error("already");
            }else{
                sqlQuery = "insert into hours(doctor_id_,hour_,date_,flag_) values(?,?,?,0);";
                preparedStatement = connection.prepareStatement(sqlQuery);
                preparedStatement.setInt(1,doctor.getId());
                preparedStatement.setString(2,doctorWorkHour);
                preparedStatement.setString(3, date);
                preparedStatement.executeUpdate();
            }
        }catch(SQLException e){
                helper.error("db");
            }finally{
            try{
                connection.close();
                statement.close();
                if(preparedStatement!=null)preparedStatement.close();
            }catch(SQLException e){
                helper.error("db");
            }
        }
        doctorWorkHourTableUpdate();
    }//GEN-LAST:event_bttnAddDoctorWorkHourActionPerformed

    private void bttnDeleteDoctorWorkHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnDeleteDoctorWorkHourActionPerformed
        String deleteId = txtfldDeleteDoctorWorkHourId.getText();
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        if(deleteId.length()==0){
            helper.error("empty");
        }else{
            String sqlQuery = "select * from hours where id_="+deleteId+";";
            try{
                connection = db.connect();
                statement = connection.createStatement();
                ResultSet result = statement.executeQuery(sqlQuery);
                if(!result.next()){
                    helper.error("nope");
                }else{
                    sqlQuery  = "delete from hours where id_="+deleteId+";";
                    preparedStatement = connection.prepareStatement(sqlQuery);
                    preparedStatement.executeUpdate();
                    helper.error("deleteSucces");
                    txtfldDeleteDoctorWorkHourId.setText(null);
                }
            }catch(SQLException e){
                helper.error("db");
            }finally{
                try {
                    connection.close();
                    statement.close();
                    if(preparedStatement!=null)preparedStatement.close();
                } catch (SQLException ex) {
                    helper.error("db");
                }
            }
        }
        doctorWorkHourTableUpdate();
    }//GEN-LAST:event_bttnDeleteDoctorWorkHourActionPerformed

    private void tblDoctorWorkHourDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorWorkHourDateMouseClicked
        int selectedRow = tblDoctorWorkHourDate.getSelectedRow();
        txtfldDeleteDoctorWorkHourId.setText(tblmdlDoctorWorkHour.getValueAt(selectedRow,0).toString());
    }//GEN-LAST:event_tblDoctorWorkHourDateMouseClicked

    private void tblDoctorAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorAppointmentMouseClicked
        int selectedRow = tblDoctorAppointment.getSelectedRow();
        txtrDoctorPatientExplanation.setText(tblmdlDoctorAppointment.getValueAt(selectedRow, 3).toString());
    }//GEN-LAST:event_tblDoctorAppointmentMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnAddDoctorWorkHour;
    private javax.swing.JButton bttnDeleteDoctorWorkHour;
    private javax.swing.JComboBox<String> cmbbxAddDoctorWorkHour;
    private com.toedter.calendar.JDateChooser dtchsrDoctorWorkDate;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JLabel lblAddWorkHour;
    private javax.swing.JLabel lblDeleteWorkHour;
    private javax.swing.JLabel lblDoctorName;
    private javax.swing.JLabel lblDoctorTcNo;
    private javax.swing.JPanel pnlAddDoctorWorkHour;
    private javax.swing.JPanel pnlDeleteDoctorWorkHour;
    private javax.swing.JTabbedPane tbbdpnAddDeleteDoctorWorkHour;
    private javax.swing.JTable tblDoctorAppointment;
    private javax.swing.JTable tblDoctorWorkHourDate;
    private javax.swing.JTextField txtfldDeleteDoctorWorkHourId;
    private javax.swing.JTextArea txtrDoctorPatientExplanation;
    // End of variables declaration//GEN-END:variables
}
